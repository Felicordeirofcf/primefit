from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel, EmailStr, Field
from src.core.db_client import get_database_client
from src.schemas.user import UserCreate, UsuarioResponse, RoleEnum # Importar UserCreate, UsuarioResponse e RoleEnum

router = APIRouter()

# 游닍 Modelo de dados para cadastro de clientes/leads - Agora usa UserCreate
# ClienteCreate foi substitu칤do por UserCreate

@router.post("/clientes", response_model=UsuarioResponse, status_code=status.HTTP_201_CREATED)
async def cadastrar_cliente(user_data: UserCreate):  # Usar user_data do tipo UserCreate
    """
    游닌 Rota p칰blica para capta칞칚o de leads/clientes.
    Salva no PostgreSQL se o e-mail ainda n칚o estiver cadastrado.
    """
    try:
        db_client = get_database_client()
        
        # 游댍 Verifica duplicidade por e-mail
        existing_user = db_client.get_user_by_email(user_data.email) # Usar get_user_by_email
        if existing_user:
            raise HTTPException(status_code=400, detail="E-mail j치 cadastrado.")

        # 游닋 Insere novo usu치rio com role de cliente
        # user_data j치 cont칠m todos os campos necess치rios, incluindo role
        # A senha deve ser hashed antes de ser passada para o banco de dados
        # Para simplificar aqui, vamos assumir que a senha ser치 hashed no auth.py ou em um servi칞o de usu치rio
        # Se esta rota for apenas para 

