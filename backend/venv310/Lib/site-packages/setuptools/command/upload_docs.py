from fastapi import APIRouter, HTTPException, UploadFile, File, Depends
from supabase import create_client
from auth import get_current_user
import os

router = APIRouter()

# üîó Conex√£o com Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
if not SUPABASE_URL or not SUPABASE_KEY:
    raise RuntimeError("SUPABASE_URL e SUPABASE_KEY devem estar configuradas.")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

@router.post("/auth/upload_docs")
async def upload_docs(file: UploadFile = File(...), email: str = Depends(get_current_user)):
    try:
        # ‚úÖ DEBUG: Listar os buckets dispon√≠veis
        buckets = supabase.storage.list_buckets()
        print("üì¶ Buckets dispon√≠veis:", buckets)

        content = await file.read()
        filename = f"{email}_{file.filename}"
        storage_path = f"{filename}"  # N√£o inclua 'treinos/' se j√° estiver no bucket

        # üü¢ Tente fazer upload no bucket chamado 'treinos'
        upload_result = supabase.storage.from_("treinos").upload(
            storage_path,
            content,
            {"content-type": file.content_type}
        )

        if upload_result.get("error"):
            print("‚ùå Erro no upload:", upload_result["error"])
            raise HTTPException(status_code=500, detail=f"Erro no upload: {upload_result['error']}")

        public_url = supabase.storage.from_("treinos").get_public_url(storage_path)

        supabase.table("usuarios").update({
            "treino_pdf": public_url
        }).eq("email", email).execute()

        return {"message": "Arquivo enviado com sucesso!", "url": public_url}

    except Exception as e:
        print("‚ùå ERRO no upload_docs:", str(e))
        raise HTTPException(status_code=500, detail=f"Erro inesperado no upload: {str(e)}")
