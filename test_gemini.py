#!/usr/bin/env python3.11

import os
import sys
import asyncio
from dotenv import load_dotenv

# Adicionar o diret√≥rio do projeto ao path
sys.path.append('/home/ubuntu/primefit_project/backend')

# Carregar vari√°veis de ambiente
load_dotenv()

from src.core.gemini_client import gemini_client

async def test_gemini_integration():
    """Testa a integra√ß√£o com a API do Gemini"""
    
    print("üß™ Testando integra√ß√£o com API Gemini...")
    print(f"API Key configurada: {'‚úÖ' if os.getenv('GEMINI_API_KEY') else '‚ùå'}")
    
    # Teste 1: Chatbot de pr√©-venda
    print("\n1Ô∏è‚É£ Testando chatbot de pr√©-venda...")
    try:
        prompt_pre_venda = """
        Voc√™ √© um assistente virtual especialista do PrimeFit, um servi√ßo de consultoria online de emagrecimento. Seu nome √© Pri.
        Seu objetivo principal √©: engajar visitantes do site, entender suas metas de emagrecimento e sa√∫de, responder d√∫vidas e remover obje√ß√µes para gui√°-los de forma segura e convincente √† contrata√ß√£o de um plano.
        Seu tom de voz deve ser: amig√°vel, proativo, encorajador e altamente informativo. Voc√™ deve transmitir confian√ßa e especializa√ß√£o.
        com respostas curtas, objetivas e diretas. 
        Voc√™ deve evitar jarg√µes t√©cnicos e usar uma linguagem simples e acess√≠vel.
        Voc√™ deve sempre perguntar o nome do usu√°rio pelo menos uma vez e usar o nome dele nas respostas.
        
        """
        
        response = await gemini_client.generate_response(
            prompt="Ol√°, estou interessado em emagrecer mas n√£o sei por onde come√ßar.",
            system_prompt=prompt_pre_venda
        )
        print(f"‚úÖ Resposta do chatbot: {response[:100]}...")
        
    except Exception as e:
        print(f"‚ùå Erro no chatbot de pr√©-venda: {str(e)}")
    
    # Teste 2: Gera√ß√£o de plano de treino
    print("\n2Ô∏è‚É£ Testando gera√ß√£o de plano de treino...")
    try:
        prompt_treino = """
        Voc√™ √© um personal trainer de elite, especialista em fisiologia do exerc√≠cio e biomec√¢nica.
        Sua tarefa √©: criar um plano de treino semanal detalhado, com base nos dados do usu√°rio:
        
        Objetivo: perder peso
        N√≠vel: iniciante
        Dias por semana: 3
        Tempo por sess√£o: 45 minutos
        Equipamentos: peso corporal, halteres
        Restri√ß√µes ou Les√µes: nenhuma
        
        Formato da Resposta: A sua resposta DEVE ser um objeto JSON v√°lido.
        """
        
        response = await gemini_client.generate_json_response(
            prompt="Gere o plano de treino conforme especificado.",
            system_prompt=prompt_treino
        )
        print(f"‚úÖ Plano de treino gerado: {type(response)} com {len(response) if isinstance(response, list) else 'N/A'} dias")
        
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de plano de treino: {str(e)}")
    
    # Teste 3: Recomenda√ß√µes nutricionais
    print("\n3Ô∏è‚É£ Testando recomenda√ß√µes nutricionais...")
    try:
        prompt_nutricao = """
        Voc√™ √© um nutricionista focado em alimenta√ß√£o pr√°tica e saud√°vel.
        Sua tarefa √©: criar 3 op√ß√µes de jantar que se encaixem nas prefer√™ncias e objetivos do usu√°rio.
        
        Dados do usu√°rio:
        Objetivo cal√≥rico di√°rio: 1500
        Prefer√™ncias alimentares: vegetariano, low carb
        Restri√ß√µes: intoler√¢ncia √† lactose
        """
        
        response = await gemini_client.generate_response(
            prompt="Sugira op√ß√µes de refei√ß√µes.",
            system_prompt=prompt_nutricao
        )
        print(f"‚úÖ Recomenda√ß√µes nutricionais: {response[:100]}...")
        
    except Exception as e:
        print(f"‚ùå Erro nas recomenda√ß√µes nutricionais: {str(e)}")
    
    print("\nüéâ Testes de integra√ß√£o conclu√≠dos!")

if __name__ == "__main__":
    asyncio.run(test_gemini_integration())

